# Create the file name pattern
pattern <- paste0(id, "_streamflow_qc.txt$")
# Find the file that matches the current gauge ID
file <- grep(pattern, all_files, value = TRUE)
# Check if the file exists
if (length(file) > 0) {
# Read the file and store it in the list
data_list[[id]] <- read.table(file, header = TRUE, sep = " ")
}
}
View(data_list)
column_names <- c("gauge_id", "year", "month", "day", "q", "QCflag")
column_names <- c("gauge_id", "year", "month", "day", "q", "QCflag")
# Initialize an empty list to store the data frames
data_list <- list()
# Loop through the gauge IDs
for (id in gauge_ids) {
# Create the file name pattern
pattern <- paste0(id, "_streamflow_qc.txt$")
# Find the file that matches the current gauge ID
file <- grep(pattern, all_files, value = TRUE)
# Check if the file exists
if (length(file) > 0) {
# Read the file and store it in the list
data_list[[id]] <- read.table(file, header = FALSE, col.names = column_names, sep = " ")
}
}
# Read the file and store it in the list
data_list[[id]] <- read.table(file, header = FALSE, col.names = column_names, sep = "\")
}
}
# Bind all the data frames in the list
data <- do.call(rbind, data_list)
```
# Loop through the gauge IDs
for (id in gauge_ids) {
# Create the file name pattern
pattern <- paste0(id, "_streamflow_qc.txt$")
# Initialize an empty list to store the data frames
data_list <- list()
# Loop through the gauge IDs
for (id in gauge_ids) {
# Create the file name pattern
pattern <- paste0(id, "_streamflow_qc.txt$")
# Find the file that matches the current gauge ID
file <- grep(pattern, all_files, value = TRUE)
# Check if the file exists
if (length(file) > 0) {
# Read the file and store it in the list
data_list[[id]] <- read.table(file, header = FALSE, col.names = column_names, sep = "")
}
}
View(data_list)
# Bind all the data frames in the list
AppsDailyQ <- bind_rows(data_list)
View(AppsDailyQ)
unique(AppsDailyQ$QCflag)
#Filter out days where flow info is missing (QCflag = M)
AppsDailyQ <- AppsDailyQ |>
filter(QCflag != "M")
View(AppsDailyQ)
View(AppGages)
#need to calculate flow in mm/day ()
QdatDV <- left_join(AppsDailyQ, AppGages, by = "gauge_id"
#need to calculate flow in mm/day ()
QdatDV <- left_join(AppsDailyQ, AppGages, by = "gauge_id") |>
#need to calculate flow in mm/day ()
QdatDV <- left_join(AppsDailyQ, AppGages, by = "gauge_id")
#Filter out days where flow info is missing (QCflag = M)
AppsDailyQ <- AppsDailyQ |>
filter(QCflag != "M") |>
as.character(gauge_id)
AppsDailyQ$gauge_id <- as.character(AppsDailyQ$gauge_id)
#need to calculate flow in mm/day ()
QdatDV <- left_join(AppsDailyQ, AppGages, by = "gauge_id")
View(QdatDV)
AppsDailyQ$gauge_id <- as.character(AppsDailyQ$gauge_id) |>
mutate(ymd(paste(year, month, day)))
#Filter out days where flow info is missing (QCflag = M)
AppsDailyQ <- AppsDailyQ |>
filter(QCflag != "M") |>
mutate(ymd(paste(year, month, day)))
#Filter out days where flow info is missing (QCflag = M)
AppsDailyQ <- AppsDailyQ |>
filter(QCflag != "M") |>
mutate(date = ymd(paste(year, month, day)))
View(AppsDailyQ)
#Filter out days where flow info is missing (QCflag = M)
AppsDailyQ <- AppsDailyQ |>
filter(QCflag != "M") |>
mutate(date = dmy(paste(day, month, year)))
#Filter out days where flow info is missing (QCflag = M)
AppsDailyQ <- AppsDailyQ |>
filter(QCflag != "M") |>
mutate(date = dmy(paste(day, month, year))) |>
format(date, "%d %B %Y")
#Filter out days where flow info is missing (QCflag = M)
AppsDailyQ <- AppsDailyQ |>
filter(QCflag != "M") |>
mutate(date = dmy(paste(day, month, year))) |>
dplyr:: select(-year, -month, -day)
AppsDailyQ$gauge_id <- as.character(AppsDailyQ$gauge_id)
"C:\Users\lfink\Desktop\camels API scripts\basin_dataset_public_v1p2\usgs_streamflow\17"
?merge
#need to calculate flow in mm/day ()
QdatDV <- merge(AppsDailyQ, select(AppGages, gauge_id, DRAIN_SQKM), by = "gauge_id")
#need to calculate flow in mm/day ()
QdatDV <- merge(AppsDailyQ, select(AppGages, gauge_id, DRAIN_SQKM))
#need to calculate flow in mm/day ()
QdatDV <- base::merge(AppsDailyQ, select(AppGages, gauge_id, DRAIN_SQKM))
#need to calculate flow in mm/day ()
QdatDV <- merge(AppsDailyQ, dplyr::select(AppGages, gauge_id, DRAIN_SQKM))
drain_sqkm <- AppGages %>%
select(gauge_id, DRAIN_SQKM)
drain_sqkm <- AppGages %>%
dplyr::select(gauge_id, DRAIN_SQKM)
#need to calculate flow in mm/day ()
QdatDV <- merge(AppsDailyQ, drain_sqkm)
QdatDV <- QdatDV |>
mutate(Qmm_day = 2.447 * Flow / DRAIN_SQKM)
QdatDV <- QdatDV |>
mutate(Qmm_day = 2.447 * q / DRAIN_SQKM)
# Might want to write out this big CSV here!
#Input: Vector with baseflow
FlowBase <- QdatDV$q
#Filter param is set at 0.925
#10957 = 30 yr * 365 days + 7 leap days
for(i in 1:112)
{
if(i == 1){
Baseflow <-BaseflowSeparation(FlowBase[((10957 * (i - 1)) + 1):(10957 * i)], 0.925, 3)
}else{
Baseflownew <- BaseflowSeparation(FlowBase[((10957 * (i - 1)) + 1):(10957 * i)], 0.925, 3)
Baseflow <- rbind(Baseflow, Baseflownew)
}
}
source("BaseflowSeparation.R")
{
if(i == 1){
Baseflow <-BaseflowSeparation(FlowBase[((10957 * (i - 1)) + 1):(10957 * i)], 0.925, 3)
}else{
Baseflownew <- BaseflowSeparation(FlowBase[((10957 * (i - 1)) + 1):(10957 * i)], 0.925, 3)
Baseflow <- rbind(Baseflow, Baseflownew)
}
}
#need to calculate flow in mm/day ()
QdatDV <- merge(AppsDailyQ, drain_sqkm)
#need to calculate flow in mm/day ()
QdatDV <- merge(AppsDailyQ, drain_sqkm, by = "gauge_id")
# Bind all the data frames in the list
AppsDailyQ <- bind_rows(data_list)
#Check for gaps in data
unique(AppsDailyQ$QCflag)
#Filter out days where flow info is missing (QCflag = M)
AppsDailyQ <- AppsDailyQ |>
filter(QCflag != "M") |>
mutate(date = dmy(paste(day, month, year))) |>
dplyr:: select(-year, -month, -day)
AppsDailyQ$gauge_id <- as.character(AppsDailyQ$gauge_id)
drain_sqkm <- AppGages %>%
dplyr::select(gauge_id, DRAIN_SQKM)
#need to calculate flow in mm/day ()
QdatDV <- merge(AppsDailyQ, drain_sqkm, by = "gauge_id")
View(QdatDV)
unique(AppsDailyQ$gauge_id)
unique(AppGages$gauge_id)
#need to calculate flow in mm/day ()
QdatDV <- left_join(AppsDailyQ, drain_sqkm, by = "gauge_id")
QdatDV <- QdatDV |>
mutate(Qmm_day = 2.447 * q / DRAIN_SQKM) |>
na.omit()
# Might want to write out this big CSV here!
#Input: Vector with baseflow
FlowBase <- QdatDV$q
#Filter param is set at 0.925
#10957 = 30 yr * 365 days + 7 leap days
for(i in 1:112)
{
if(i == 1){
Baseflow <-BaseflowSeparation(FlowBase[((10957 * (i - 1)) + 1):(10957 * i)], 0.925, 3)
}else{
Baseflownew <- BaseflowSeparation(FlowBase[((10957 * (i - 1)) + 1):(10957 * i)], 0.925, 3)
Baseflow <- rbind(Baseflow, Baseflownew)
}
}
# Might want to write out this big CSV here!
#Input: Vector with baseflow
FlowBase <- QdatDV$q
# Might want to write out this big CSV here!
#Input: Vector with baseflow
FlowBase <- QdatDV$Qmm_day
FlowBase
# Might want to write out this big CSV here!
#Input: Vector with baseflow
FlowBase <- QdatDV[[Qmm_day]]
#need to calculate flow in mm/day ()
QdatDV <- left_join(AppsDailyQ, drain_sqkm, by = "gauge_id")
View(QdatDV)
View(drain_sqkm)
#need to calculate flow in mm/day ()
QdatDV <- merge(AppsDailyQ, drain_sqkm, by = "gauge_id")
drain_sqkm <- AppGages %>%
dplyr::select(gauge_id, DRAIN_SQKM)
#need to calculate flow in mm/day ()
QdatDV <- merge(AppsDailyQ, drain_sqkm, by = "gauge_id")
#need to calculate flow in mm/day ()
QdatDV <- merge(AppsDailyQ, drain_sqkm, all.x = T)
View(QdatDV)
#need to calculate flow in mm/day ()
QdatDV <- left_join(AppsDailyQ, drain_sqkm, by="gauge_id")
View(QdatDV)
# Bind all the data frames in the list
AppsDailyQ <- bind_rows(data_list)
AppsDailyQ$gauge_id <- paste0("0", AppsDailyQ$gauge_id)
drain_sqkm <- AppGages %>%
dplyr::select(gauge_id, DRAIN_SQKM)
#need to calculate flow in mm/day ()
QdatDV <- left_join(AppsDailyQ, drain_sqkm, by="gauge_id")
QdatDV <- QdatDV |>
mutate(Qmm_day = 2.447 * q / DRAIN_SQKM)
# Might want to write out this big CSV here!
#Input: Vector with baseflow
FlowBase <- QdatDV[[Qmm_day]]
# Might want to write out this big CSV here!
#Input: Vector with baseflow
FlowBase <- QdatDV$Qmm_day
#Filter param is set at 0.925
#10957 = 30 yr * 365 days + 7 leap days
for(i in 1:112)
{
if(i == 1){
Baseflow <-BaseflowSeparation(FlowBase[((10957 * (i - 1)) + 1):(10957 * i)], 0.925, 3)
}else{
Baseflownew <- BaseflowSeparation(FlowBase[((10957 * (i - 1)) + 1):(10957 * i)], 0.925, 3)
Baseflow <- rbind(Baseflow, Baseflownew)
}
}
#add to original dataframe
QdatBaseflow <- cbind(Baseflow, QdatBaseflow)
View(Baseflow)
View(Baseflownew)
View(Baseflow)
View(QdatBaseflow)
View(Baseflownew)
1227184+10957
1417750/1238141
#add to original dataframe
QdatBaseflow <- cbind(Baseflow, QdatDV)
View(QdatBaseflow)
#add to original dataframe
QdatBaseflow <- cbind(Baseflow, QdatDV)
View(AppsDailyQ)
#need to calculate flow in mm/day ()
QdatDV <- left_join(AppsDailyQ, AppsGages, by="gauge_id")
#need to calculate flow in mm/day ()
QdatDV <- left_join(AppsDailyQ, AppGages, by="gauge_id")
QdatDV <- QdatDV |>
mutate(Qmm_day = 2.447 * q / DRAIN_SQKM)
# Might want to write out this big CSV here!
#Input: Vector with baseflow
FlowBase <- QdatDV$Qmm_day
#Filter param is set at 0.925
#10957 = 30 yr * 365 days + 7 leap days
for(i in 1:112)
{
if(i == 1){
Baseflow <-BaseflowSeparation(FlowBase[((10957 * (i - 1)) + 1):(10957 * i)], 0.925, 3)
}else{
Baseflownew <- BaseflowSeparation(FlowBase[((10957 * (i - 1)) + 1):(10957 * i)], 0.925, 3)
Baseflow <- rbind(Baseflow, Baseflownew)
}
}
#add to original dataframe
QdatBaseflow <- cbind(Baseflow, QdatDV)
View(Baseflow)
#Filter param is set at 0.925
#10957 = 30 yr * 365 days + 7 leap days
for(i in 1:112) {
if(i == 1) {
Baseflow <- BaseflowSeparation(FlowBase[((10957 * (i - 1)) + 1):(10957 * i)], 0.925, 3)
} else {
Baseflownew <- BaseflowSeparation(FlowBase[((10957 * (i - 1)) + 1):(10957 * i)], 0.925, 3)
Baseflow <- rbind(Baseflow, Baseflownew)
}
}
#Filter param is set at 0.925
#12783 = 34 yr * 365 days + x leap days
for(i in 1:112) {
if(i == 1) {
Baseflow <- BaseflowSeparation(FlowBase[((12783 * (i - 1)) + 1):(12783 * i)], 0.925, 3)
} else {
Baseflownew <- BaseflowSeparation(FlowBase[((12783 * (i - 1)) + 1):(12783 * i)], 0.925, 3)
Baseflow <- rbind(Baseflow, Baseflownew)
}
}
na_locations <- which(is.na(QdatDV), arr.ind = TRUE)
View(na_locations)
#Filter out days where flow info is missing (QCflag = M)
AppsDailyQ <- AppsDailyQ |>
filter(QCflag != "M" | "A:e" ) |>
mutate(date = dmy(paste(day, month, year))) |>
dplyr:: select(-year, -month, -day)
#Filter out days where flow info is missing (QCflag = M)
AppsDailyQ <- AppsDailyQ |>
filter(QCflag != "M") |>
mutate(date = dmy(paste(day, month, year))) |>
dplyr:: select(-year, -month, -day)
View(Baseflow)
View(QdatDV)
na_locations <- which(is.na(QdatDV$q), arr.ind = TRUE)
if (length(na_locations) > 0) {
print("NAs found at the following row locations:")
print(na_locations)
} else {
print("No NAs found in the dataframe.")
}
#Filter out days where flow info is missing (QCflag = M)
AppsDailyQ <- AppsDailyQ |>
filter(QCflag != "M") |>
filter(QCflag != "A:e")
#Filter out days where flow info is missing (QCflag = M)
AppsDailyQ <- AppsDailyQ |>
filter(QCflag != "M") |>
filter(QCflag != "A:e") |>
mutate(date = dmy(paste(day, month, year))) |>
dplyr:: select(-year, -month, -day)
# Bind all the data frames in the list
AppsDailyQ <- bind_rows(data_list)
#Check for gaps in data
unique(AppsDailyQ$QCflag)
#Filter out days where flow info is missing (QCflag = M)
AppsDailyQ <- AppsDailyQ |>
filter(QCflag != "M") |>
filter(QCflag != "A:e") |>
mutate(date = dmy(paste(day, month, year))) |>
dplyr:: select(-year, -month, -day)
AppsDailyQ$gauge_id <- as.character(AppsDailyQ$gauge_id)
AppsDailyQ$gauge_id <- paste0("0", AppsDailyQ$gauge_id)
#need to calculate flow in mm/day ()
QdatDV <- left_join(AppsDailyQ, AppGages, by="gauge_id")
QdatDV <- QdatDV |>
mutate(Qmm_day = 2.447 * q / DRAIN_SQKM)
# Might want to write out this big CSV here!
#Input: Vector with baseflow
FlowBase <- QdatDV$Qmm_day
# Count the number of days with observations
num_days_observed <- QdatDV %>%
summarise(num_days = n_distinct(Date))
# Count the number of days with observations
num_days_observed <- QdatDV %>%
pull(Date) %>%
n_distinct()
# Count the number of days with observations
num_days_observed <- QdatDV %>%
pulldDate) %>%
# Count the number of days with observations
num_days_observed <- QdatDV %>%
pull(date) %>%
n_distinct()
# Print the result
print(num_days_observed)
#Filter param is set at 0.925
#12784 = 34 yr * 365 days + x leap days
for(i in 1:112) {
if(i == 1) {
Baseflow <- BaseflowSeparation(FlowBase[((12784 * (i - 1)) + 1):(12784 * i)], 0.925, 3)
} else {
Baseflownew <- BaseflowSeparation(FlowBase[((12784 * (i - 1)) + 1):(12784 * i)], 0.925, 3)
Baseflow <- rbind(Baseflow, Baseflownew)
}
}
na_rows <- QDatDV[is.na(QDatDV$Qmm_day), ]
na_rows <- QDatDV[is.na(QdatDV$Qmm_day), ]
na_rows <- QdatDV[is.na(QdatDV$Qmm_day), ]
View(na_rows)
# Bind all the data frames in the list
AppsDailyQ <- bind_rows(data_list)
#Check for gaps in data
unique(AppsDailyQ$QCflag)
#Filter out days where flow info is missing (QCflag = M)
AppsDailyQ <- AppsDailyQ |>
filter(QCflag != "M") |>
filter(QCflag != "A:e") |>
mutate(date = dmy(paste(day, month, year))) |>
dplyr:: select(-year, -month, -day)
AppsDailyQ$gauge_id <- as.character(AppsDailyQ$gauge_id)
AppsDailyQ$gauge_id <- paste0("0", AppsDailyQ$gauge_id)
#need to calculate flow in mm/day ()
QdatDV <- left_join(AppsDailyQ, AppGages, by="gauge_id")
na_locations <- which(is.na(QdatDV$q), arr.ind = TRUE)
na_rows <- QdatDV[is.na(QdatDV$Qmm_day), ]
QdatDV <- QdatDV |>
mutate(Qmm_day = 2.447 * q / DRAIN_SQKM)
# Count the number of days with observations
num_days_observed <- QdatDV %>%
pull(date) %>%
n_distinct()
# Print the result
print(num_days_observed)
# Might want to write out this big CSV here!
#Input: Vector with baseflow
FlowBase <- QdatDV$Qmm_day
#Filter param is set at 0.925
#12784 = 34 yr * 365 days + x leap days
for(i in 1:112) {
if(i == 1) {
Baseflow <- BaseflowSeparation(FlowBase[((12784 * (i - 1)) + 1):(12784 * i)], 0.925, 3)
} else {
Baseflownew <- BaseflowSeparation(FlowBase[((12784 * (i - 1)) + 1):(12784 * i)], 0.925, 3)
Baseflow <- rbind(Baseflow, Baseflownew)
}
}
#Filter param is set at 0.925
#12784 = 34 yr * 365 days + x leap days
for(i in 1:112) {
if(i == 1) {
Baseflow <- BaseflowSeparation(FlowBase[((12784 * (i - 1)) + 1):(12784 * i)], na.rm = TRUE, 0.925, 3)
} else {
Baseflownew <- BaseflowSeparation(FlowBase[((12784 * (i - 1)) + 1):(12784 * i)], na.rm = TRUE, 0.925, 3)
Baseflow <- rbind(Baseflow, Baseflownew)
}
}
n(QdatDV$gauge_id)
num_unique_gauge_ids <- QDatDV %>%
pull(gauge_id) %>%
n_distinct()
num_unique_gauge_ids <- QdatDV %>%
pull(gauge_id) %>%
n_distinct()
# Print the result
print(num_unique_gauge_ids)
source("BaseflowSeparation.R")
#need to calculate flow in mm/day ()
QdatDV <- left_join(AppsDailyQ, AppGages, by="gauge_id")
QdatDV <- QdatDV |>
mutate(Qmm_day = 2.447 * q / DRAIN_SQKM)
#Check for NA's in data
na_rows <- QdatDV[is.na(QdatDV$Qmm_day), ]
# Might want to write out this big CSV here!
#Input: Vector with baseflow
FlowBase <- QdatDV$Qmm_day
# Count the number of days with observations
num_days_observed <- QdatDV %>%
pull(date) %>%
n_distinct()
# Print the result
print(num_days_observed)
#Filter param is set at 0.925
#12784 = 34 yr * 365 days + x leap days
for(i in 1:112) {
if(i == 1) {
Baseflow <- BaseflowSeparation(FlowBase[((12784 * (i - 1)) + 1):(12784 * i)], 0.925, 3)
} else {
Baseflownew <- BaseflowSeparation(FlowBase[((12784 * (i - 1)) + 1):(12784 * i)], 0.925, 3)
Baseflow <- rbind(Baseflow, Baseflownew)
}
}
1303968+12784
start_date <- ymd("1980-01-01")
end_date <- ymd("2014-12-31")
# Count the number of leap days within the time period
num_leap_days <- sum(leap_year(seq(start_date, end_date, by = "day")))
print(num_leap_days)
# Calculate the total number of days in the time period
total_days <- as.numeric(difftime(end_date, start_date, units = "days"))
# Calculate the number of days minus leap days
days_minus_leap_days <- total_days - num_leap_days
print(days_minus_leap_days)
3294+9489
#Filter param is set at 0.925
#12784 = 34 yr * 365 days + x leap days
for(i in 1:112) {
if(i == 1) {
Baseflow <- BaseflowSeparation(FlowBase[((12783 * (i - 1)) + 1):(12783 * i)], 0.925, 3)
} else {
Baseflownew <- BaseflowSeparation(FlowBase[((12783 * (i - 1)) + 1):(12783 * i)], 0.925, 3)
Baseflow <- rbind(Baseflow, Baseflownew)
}
}
View(QdatDV)
View(BaseflowSeparation)
# Might want to write out this big CSV here!
#Input: Vector with baseflow
QdatDV$baseflow <- NA
View(Baseflow)
for (x in gauge_ids) {
QdatDV$baseflow[QdatDV$gauge_id == x] <-
BaseflowSeparation(QdatDV$Qmm_day[QdatDV$gauge_id == x])$bt
}
QdatDV |>
filter(gauge_id == gauge_ids[1]) |>
ggplot(aes(x = date, y = Qmm_day)) +
geom_line()
QdatDV |>
filter(gauge_id == gauge_ids[1]) |>
ggplot(aes(x = date, y = Qmm_day)) +
geom_line() +
geom_line(aes(y=baseflow))
QdatDV |>
filter(gauge_id == gauge_ids[1]) |>
ggplot(aes(x = date, y = Qmm_day)) +
geom_line() +
geom_line(aes(y=baseflow), color = "blue")
#sum total flow, baseflow for each gage each year. BFI calculation
BFyearlysum <- QdatBaseflow %>% mutate(Year = year(date)) %>%
group_by(year, gauge_id) %>%
summarize(BFyear = sum(bt),
Qyear = sum(Flow),
BFI = BFyear / Qyear)
View(AppGages)
View(QdatDV)
View(data_list)
